clear;
% digits(16);
addpath helpers
% Set parameters of KS equation
ModelParams.d = 100; % Periodicity length L
ModelParams.tau = 0.25; % Time step \Delta t
ModelParams.N = 128; % Number of grid points
ModelParams.const = 0; % Error value \epsilon
ModelParams.modeltype = 'ETDRK'; %Type of integration to use
% Precompute ETDRK parameters
ModelParams = precompute_KS(ModelParams);
% Set model evolution functions
ModelParams.predict = @kursiv_forecast;
ModelParams.prediction = @kursiv_model_predict;
%%
% Generate KS Equation training data and set transient discard length
PredictLength = 1500;
generate_KS_data_testDA(ModelParams,PredictLength);

%%
% Set model error to a nonzero value and recompute parameters
ModelParams.const = 0.1;
ModelParams = precompute_KS(ModelParams);

rhos = 1.5:0.5:4.0;

for rho = rhos
    PoolSize = 4;
    NumRes = 16;
    TrainLength = 80000;
    ReservoirSize = 2000;
    AvgDegree = 3;
    LocalOverlap = 6;
    InputWeight = 0.5;
    SpectralRadius = 0.6;
    RidgeReg = 1e-4;
    Predictions = 100;
    TrainSteps = 50;
    ResOnly = false;
    Noise = 0;
    RunIter = 1;
    OutputData = true;
    OutputRMS = true;
    ErrorCutoff = 0.2;
    TestFile = ['KS_Data/KS_test_input_sequence_wDAepsilon01rho',num2str(rho),'noise0.01.mat'];
    TrainFile = ['KS_Data/KS_train_input_sequence_wDAepsilon01rho',num2str(rho),'noise0.01.mat'];
    %% Run the CHyPP prediction using the above parameters
    [c_pred_length,CHyPP_pred_file,CHyPP_rms_file] = CHyPP_DA('PoolSize',PoolSize,...
        'NumRes',NumRes,'TrainLength',TrainLength,...
        'ReservoirSize',ReservoirSize,'AvgDegree',AvgDegree,'LocalOverlap',LocalOverlap,...
        'InputWeight',InputWeight,'SpectralRadius',SpectralRadius,'RidgeReg',RidgeReg,...
        'Predictions',Predictions,'PredictLength',PredictLength,'TrainSteps',TrainSteps,...
        'ResOnly',ResOnly,'Noise',Noise,'RunIter',RunIter,'OutputData',OutputData,...
        'OutputRMS',OutputRMS,'ModelParams',ModelParams,'ErrorCutoff',ErrorCutoff,...
        'CovarianceInflation',rho,'TrainFile',TrainFile,'TestFile',TestFile);
    disp(c_pred_length)
    % [avg_pred_length_CHyPP,CHyPP_pred_file,CHyPP_rms_file] = CHyPP_serial(...
    %     'NumRes',NumRes,'TrainLength',TrainLength,...
    %     'ReservoirSize',ReservoirSize,'AvgDegree',AvgDegree,'LocalOverlap',LocalOverlap,...
    %     'InputWeight',InputWeight,'SpectralRadius',SpectralRadius,'RidgeReg',RidgeReg,...
    %     'Predictions',Predictions,'PredictLength',PredictLength,'TrainSteps',TrainSteps,...
    %     'ResOnly',ResOnly,'Noise',Noise,'RunIter',RunIter,'OutputData',OutputData,...
    %     'ModelParams',ModelParams,'ErrorCutoff',ErrorCutoff);

    %% Run a reservoirs-only prediction using the same number of reservoirs
    ResOnly = true;
    Noise = 0;
    [res_pred_length,res_pred_file,res_rms_file] = CHyPP_DA('PoolSize',PoolSize,...
        'NumRes',NumRes,'TrainLength',TrainLength,...
        'ReservoirSize',ReservoirSize,'AvgDegree',AvgDegree,'LocalOverlap',LocalOverlap,...
        'InputWeight',InputWeight,'SpectralRadius',SpectralRadius,'RidgeReg',RidgeReg,...
        'Predictions',Predictions,'PredictLength',PredictLength,'TrainSteps',TrainSteps,...
        'ResOnly',ResOnly,'Noise',Noise,'RunIter',RunIter,'OutputData',OutputData,...
        'OutputRMS',OutputRMS,'ModelParams',ModelParams,'ErrorCutoff',ErrorCutoff,...
        'CovarianceInflation',rho,'TrainFile',TrainFile,'TestFile',TestFile);
    disp(res_pred_length);
    % [avg_pred_length_res,res_pred_file,res_rms_file] = CHyPP_serial(...
    %     'NumRes',NumRes,'TrainLength',TrainLength,...
    %     'ReservoirSize',ReservoirSize,'AvgDegree',AvgDegree,'LocalOverlap',LocalOverlap,...
    %     'InputWeight',InputWeight,'SpectralRadius',SpectralRadius,'RidgeReg',RidgeReg,...
    %     'Predictions',Predictions,'PredictLength',PredictLength,'TrainSteps',TrainSteps,...
    %     'ResOnly',ResOnly,'Noise',Noise,'RunIter',RunIter,'OutputData',OutputData,...
    %     'ModelParams',ModelParams,'ErrorCutoff',ErrorCutoff);
end